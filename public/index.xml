<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>025cm Blog</title>
    <link>http://localhost:1313/025cmblog/</link>
    <description>Recent content on 025cm Blog</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 23 Mar 2025 18:43:40 +0900</lastBuildDate>
    <atom:link href="http://localhost:1313/025cmblog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>First</title>
      <link>http://localhost:1313/025cmblog/posts/first/</link>
      <pubDate>Sun, 23 Mar 2025 18:43:40 +0900</pubDate>
      <guid>http://localhost:1313/025cmblog/posts/first/</guid>
      <description></description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/025cmblog/posts/4.-%E3%81%82%E3%82%8B%E3%83%95%E3%83%AD%E3%83%BC%E3%81%8C%E3%81%AA%E3%82%93%E3%82%89%E3%81%8B%E3%81%AE%E4%BE%8B%E5%A4%96%E3%82%92%E3%82%B9%E3%83%AD%E3%83%BC%E3%81%99%E3%82%8B%E3%81%93%E3%81%A8%E3%82%92%E6%9C%9F%E5%BE%85%E3%81%99%E3%82%8B%E3%83%86%E3%82%B9%E3%83%88/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/025cmblog/posts/4.-%E3%81%82%E3%82%8B%E3%83%95%E3%83%AD%E3%83%BC%E3%81%8C%E3%81%AA%E3%82%93%E3%82%89%E3%81%8B%E3%81%AE%E4%BE%8B%E5%A4%96%E3%82%92%E3%82%B9%E3%83%AD%E3%83%BC%E3%81%99%E3%82%8B%E3%81%93%E3%81%A8%E3%82%92%E6%9C%9F%E5%BE%85%E3%81%99%E3%82%8B%E3%83%86%E3%82%B9%E3%83%88/</guid>
      <description>&lt;h1 id=&#34;あるフローがなんらかの例外をスローすることを期待するテスト&#34;&gt;あるフローがなんらかの例外をスローすることを期待するテスト&lt;/h1&gt;&#xA;&lt;p&gt;例えば、コピーアンドペーストなど、なんらかの手段により電卓が許容しない桁数の数値が打ち込まれた時は、エラーをスローする必要があります。&#xA;このように、特定の条件下でエラーが適切にスローされることを確認するテストは、どのように実装するのでしょうか。&lt;/p&gt;&#xA;&lt;h2 id=&#34;電卓が許容しない桁数の数値が打ち込まれた時はエラーをスローする&#34;&gt;電卓が許容しない桁数の数値が打ち込まれた時は、エラーをスローする&lt;/h2&gt;&#xA;&lt;p&gt;桁数制限を持つ電卓クラスを準備しましょう。&#xA;Calculatorは、10桁を超える数値が入力された場合にCalculatorErrorをスローします。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;CalculatorError&lt;/span&gt;: Error {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; divideByZero&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; tooManyDigits &lt;span style=&#34;color:#75715e&#34;&gt;// 桁数制限に関するエラー&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Calculator&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; maxDigits: Int = &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// 最大桁数&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; a: Double, &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; b: Double) -&amp;gt; Double {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inputNumber&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; number: String) &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; -&amp;gt; Double {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;guard&lt;/span&gt; number.count &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; maxDigits &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; CalculatorError.tooManyDigits&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;guard&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; value = Double(number) &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; CalculatorError.tooManyDigits &lt;span style=&#34;color:#75715e&#34;&gt;// 無効な数値形式&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; value&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;テストケースを実装する&#34;&gt;テストケースを実装する&lt;/h2&gt;&#xA;&lt;p&gt;電卓が許容しない桁数の数値が入力された際に、例外がスローされることを確認するテストを実装します。&#xA;このケースにおいて便利なアサーションが&lt;code&gt;XCTAssertThrowsError&lt;/code&gt;です。&#xA;&lt;code&gt;XCTAssertThrowsError&lt;/code&gt;は、なんらかの例外をスローすることを期待します。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
